pipeline {
    agent any
    tools {
        nodejs 'NodeJS'  // Use the name you configured
    }
    // Define variables used in the pipeline
    environment {
        APP_NAME = "zcrum"
        DOCKER_REGISTRY = "harivp1234" // e.g., Docker Hub username or your container registry
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/${APP_NAME}"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        // Reference credentials stored in Jenkins
        DATABASE_URL = credentials('DATABASE_URL_CREDENTIAL')
        CLERK_SECRET_KEY = credentials('CLERK_SECRET_KEY')
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY = credentials('NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY')
        // Docker credentials
        DOCKER_CREDENTIALS = credentials('DOCKER_CREDENTIALS')
    }
    
    // Define parameters that can be set when triggering the pipeline
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'production'], description: 'Deployment Environment')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run Tests?')
        booleanParam(name: 'DEPLOY', defaultValue: true, description: 'Deploy Application?')
    }
    
    stages {
        stage('Checkout') {
            steps {
                // This will automatically check out the code from your SCM
                checkout scm
                
                // Print some info about the commit
                sh "echo 'Building commit: ${env.GIT_COMMIT}'"
            }
        }
        
        stage('Install Dependencies') {
            steps {
                tool 'NodeJS'
                withEnv(["PATH+NODE=${tool 'NodeJS'}/bin"]) {
                    dir('jira-clone') {  // Add directory change to be consistent
                        sh 'npm i'
                    }
                }
            }
        }
        
        stage('Test Network Connectivity') {
            steps {
                sh '''
                echo "Testing general internet connectivity..."
                curl -s -o /dev/null -w "%{http_code}\n" https://www.google.com || echo "HTTP connectivity failed"
                
                echo "Testing DNS resolution of database host..."
                nslookup ep-old-sunset-a5asmpuf-pooler.us-east-2.aws.neon.tech || echo "Cannot resolve database hostname"
                
                echo "Testing connectivity to Neon database..."
                nc -zv ep-old-sunset-a5asmpuf-pooler.us-east-2.aws.neon.tech 5432 || echo "Cannot connect to database"
                '''
            }
        }
        
        stage('Test Database Connection') {
            steps {
                dir('jira-clone') {
                    // Create .env file with database URL
                    sh '''
                    echo "DATABASE_URL=$DATABASE_URL" > .env
                    
                    # Create a simple test script
                    echo "console.log('Testing database connection...');
                    const { PrismaClient } = require('@prisma/client');
                    const prisma = new PrismaClient();
                    
                    async function testConnection() {
                      try {
                        const result = await prisma.$queryRaw`SELECT 1 as test`;
                        console.log('Connection successful:', result);
                        return true;
                      } catch (error) {
                        console.error('Connection failed with error:', error);
                        return false;
                      } finally {
                        await prisma.$disconnect();
                      }
                    }
                    
                    testConnection()
                      .then(success => {
                        if (!success) process.exit(1);
                      });" > test-db.js
                    
                    # Run the test
                    node test-db.js || echo "Prisma connection test failed"
                    '''
                }
            }
        }
      
        stage('Database Migration') {
            steps {
                dir('jira-clone') {
                    // Create a .env file with DATABASE_URL
                    sh '''
                    echo "DATABASE_URL=$DATABASE_URL" > .env
                    '''
                    
                    // Run Prisma migration
                    sh '''
                    # First baseline the existing migrations to avoid conflicts
                    npx prisma migrate resolve --applied 20241008105335_created_models || echo "Migration resolve step failed"
                    
                    # Then apply any new migrations
                    npx prisma migrate deploy || echo "Migration deploy step failed"
                    '''
                }
            }
        }
        
        stage('Build') {
            steps {
                dir('jira-clone') {
                    // Update .env file with all environment variables
                    sh '''
                    echo "CLERK_SECRET_KEY=$CLERK_SECRET_KEY" >> .env
                    echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" >> .env
                    echo "NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in" >> .env
                    echo "NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up" >> .env
                    echo "NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/onboarding" >> .env
                    echo "NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/onboarding" >> .env
                    '''
                    
                    // Check if Docker is installed before building image
                    sh '''
                    if which docker > /dev/null 2>&1; then
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -t ${DOCKER_IMAGE}:latest .
                    else
                        echo "Docker not installed, skipping Docker build"
                        exit 1
                    fi
                    '''
                }
            }
        }
        
        stage('Test') {
            when {
                expression { params.RUN_TESTS == true }
            }
            steps {
                dir('jira-clone') {
                    // You can add tests here if you have them
                    sh 'echo "Running tests..."'
                    // Example: sh 'npm test'
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                // Fixed Docker check and push
                sh '''
                if which docker > /dev/null 2>&1; then
                    echo $DOCKER_CREDENTIALS_PSW | docker login $DOCKER_REGISTRY -u $DOCKER_CREDENTIALS_USR --password-stdin
                    docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker push ${DOCKER_IMAGE}:latest
                else
                    echo "Docker not installed, skipping Docker push"
                    exit 1
                fi
                '''
            }
        }
        
        stage('Deploy') {
            when {
                expression { params.DEPLOY == true }
            }
            steps {
                // Deploy based on the selected environment
                script {
                    def deployEnv = params.ENVIRONMENT
                    
                    echo "Deploying to ${deployEnv} environment..."
                    
                    // Pass environment variables to the deploy script
                    withEnv([
                        "APP_NAME=${APP_NAME}",
                        "DOCKER_IMAGE=${DOCKER_IMAGE}",
                        "DOCKER_TAG=${DOCKER_TAG}",
                        "DEPLOY_ENV=${deployEnv}"
                    ]) {
                        switch(deployEnv) {
                            case 'dev':
                                // Development deployment
                                sh '''
                                if [ -f ./deploy.sh ]; then
                                    ./deploy.sh dev
                                else
                                    echo "deploy.sh not found, skipping deployment"
                                fi
                                '''
                                break
                            case 'staging':
                                // Staging deployment
                                sh '''
                                if [ -f ./deploy.sh ]; then
                                    ./deploy.sh staging
                                else
                                    echo "deploy.sh not found, skipping deployment"
                                fi
                                '''
                                break
                            case 'production':
                                // Add approval step for production
                                timeout(time: 1, unit: 'DAYS') {
                                    input message: 'Approve Production Deployment?', submitter: 'admin'
                                }
                                // Production deployment
                                sh '''
                                if [ -f ./deploy.sh ]; then
                                    ./deploy.sh production
                                else
                                    echo "deploy.sh not found, skipping deployment"
                                fi
                                '''
                                break
                            default:
                                echo "No environment specified"
                                break
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            node(null) {
                echo "Cleaning up..."
                // Fixed Docker check and cleanup
                sh '''
                if which docker > /dev/null 2>&1; then
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    docker rmi ${DOCKER_IMAGE}:latest || true
                else
                    echo "Docker not installed, skipping cleanup"
                fi
                '''
            }
        }
        success {
            node(null) {
                echo "Build succeeded! Sending notifications..."
                // Send success notifications
                // slackSend channel: '#builds', color: 'good', message: "Build Succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            }
        }
        failure {
            node(null) {
                echo "Build failed! Sending notifications..."
                // Send failure notifications
                // slackSend channel: '#builds', color: 'danger', message: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            }
        }
    }
}