pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS'
    }
    
    environment {
        DATABASE_URL = credentials('DATABASE_URL')
        CLERK_SECRET_KEY = credentials('CLERK_SECRET_KEY_CREDENTIAL')
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY = credentials('NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY')
        DOCKER_CREDENTIALS = credentials('DOCKER_CREDENTIALS')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'echo Building commit: ${GIT_COMMIT}'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('jira-clone') {
                    sh 'npm i'
                }
            }
        }
        
        stage('Database Migration') {
            steps {
                dir('jira-clone') {
                    sh 'echo DATABASE_URL=${DATABASE_URL}'
                    sh 'npx prisma migrate deploy || npx prisma db push --force-reset && npx prisma migrate deploy'
                }
            }
        }
        
        stage('Build') {
            steps {
                dir('jira-clone') {
                    sh 'npm run build'
                }
            }
        }
        
        stage('Test') {
            steps {
                dir('jira-clone') {
                    sh 'npm test || echo "No tests configured, skipping"'
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    try {
                        dir('jira-clone') {
                            sh '''
                            if command -v docker &> /dev/null; then
                                echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_CREDENTIALS_USR} --password-stdin
                                docker build -t harivp1234/zcrum:${BUILD_NUMBER} -t harivp1234/zcrum:latest .
                                docker push harivp1234/zcrum:${BUILD_NUMBER}
                                docker push harivp1234/zcrum:latest
                            else
                                echo "Docker not installed, skipping image build and push"
                            fi
                            '''
                        }
                    } catch (Exception e) {
                        echo "Docker build/push failed: ${e.message}"
                        echo "Continuing with deployment..."
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo "Deploying application..."
                // Add your deployment steps here
            }
        }
    }
    
    post {
        always {
            script {
                sh '''
                if command -v docker &> /dev/null; then
                    docker rmi harivp1234/zcrum:${BUILD_NUMBER} || true
                    docker rmi harivp1234/zcrum:latest || true
                else
                    echo "Docker not installed, skipping cleanup"
                fi
                '''
                echo "Build failed! Sending notifications..."
            }
        }
    }
}